Every Mail.app method which is to be swizzled, has to be prefixed
with MA (MailApp).

There's a folder in Resources which is called old. This folder
is used to diff the a modified xib with the latest xib.
It's used for localizeXIB. 
DON'T EVER DELETE THIS FOLDER!

* Reverse Engineering *

- Sometimes it's not to easy to find out what happens to an
  object you created. In that case you can over release it,
  using autorelease or release. This way, the object will be
  ending up an NSZombie, which can later be tracked using Instruments
  allocation tool. (VERY HELPFUL)

- clearCachedDecrypted is called everytime the message is unlodaed.
  we should better cache it.

- Mail internally seems to use firstChildPart to determine the charset of the message.

_getSomeCharsetFromPartTree -> exists only internally

- -[Message setNumberOfAttachments:isSigned:isEncrypted:] is only called for
  encrypted messages, strangely enough.
  Still have to find out what usually sets the number.
  Mail.app uses -[MessageStore setNumberOfAttachments:isSigned:isEncrypted:forMessage:] to set the number
  of attachments for every message, but this is only called when the message comes in
  and never touched again, except for encrypted messages.
  
  So to always work, GPGMail forces Mail.app to update the number for every message, each time
  it's parsed or the number is different, by recalculating the number.

* Committing *

- Always use git -p <filename>. This let's you decide for each file
  what lines should be added to a commit.
- Use this to create commits which only fix one problem at a time.

* Other *

- Mail.app comes with a lot of general class enhancements. It's best to look
  them through to find helpful ones.
  
  @interface NSData (MessageAdditions)
  - (id)initWithDataConvertingLineEndingsFromUnixToNetwork:(id)arg1;
  - (id)initWithDataConvertingLineEndingsFromNetworkToUnix:(id)arg1;
  - (id)dataByConvertingLineEndingsFromUnixToNetwork;
  
  // To detect if the data contains real message headers.
  - (struct _NSRange)rangeOfRFC822HeaderData;

* Data Detectors *

- Extremely hard to implement native ones.
- Enabling Javascript in WebViews works
  [[WebView preferences] setJavaScriptEnabled:YES]
- Using Javascript to emulate the bevaiour might be rather easy.