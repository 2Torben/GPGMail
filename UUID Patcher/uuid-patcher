#!/bin/bash

LOGFILE="$HOME/Library/Logs/gpgmail-uuid-patcher.log"

function log {
    current_date=$(date "+%Y-%m-%d %H:%M:%S")
    echo "$current_date: $1"
    if [[ "$2" != "" ]]; then
        echo ""
    fi
}

function gpgMailInstallPath {
    sysdir="/Library/Mail/Bundles"
    netdir="/Network/Library/Mail/Bundles"
    homedir="$HOME/Library/Mail/Bundles"
    bundle="GPGMail.mailbundle"
    
    existingInstallationAt=""

    if [[ -e "$netdir/$bundle" ]]; then
        existingInstallationAt="$netdir"
    elif [[ -e "$homedir/$bundle" ]]; then
        existingInstallationAt="$homedir"
    elif [[ -e "$sysdir/$bundle" ]]; then
        existingInstallationAt="$sysdir"
    else
        existingInstallationAt=""
    fi
    
    echo $existingInstallationAt
}

function updatePlistWithUUIDIfNecessary {
    plist="$1"
    uuid="$2"
    
    if ! grep -q $uuid "$plist.plist"; then
        echo "[uuid-patcher] Adding UUID $uuid to $plist"
        sudo defaults write "$plist" "SupportedPluginCompatibilityUUIDs" -array-add "$uuid"
        sudo plutil -convert xml1 "$plist.plist"
        sudo chmod a+r "$plist.plist"
    else
        echo "[uuid-patcher] UUID $uuid is already available. No need to update plist."
    fi
}

function patchUUIDs {
    echo "[uuid-patcher] Trying to find GPGMail bundle..."
    # Location of the GPGMail bundle
    bundlePath=$(gpgMailInstallPath)
    bundle="GPGMail.mailbundle"
    
    if [ -z "$bundlePath" ]; then
        echo "[uuid-patcher] GPGMail not installed"
        return
    fi
    
    bundlePath="$bundlePath/$bundle"
    
    echo "[uuid-patcher] Found GPGMail in $bundlePath"
    
    # Fetch the Mail UUID and the Message.framework UUID
    plistMail="/Applications/Mail.app/Contents/Info"
    plistFramework="/System/Library/Frameworks/Message.framework/Resources/Info"
    uuid1=$(defaults read "$plistMail" "PluginCompatibilityUUID")
    uuid2=$(defaults read "$plistFramework" "PluginCompatibilityUUID")
    
    echo "[uuid-patcher] Following UUIDs found: $uuid1 $uuid2"
    
    if [ ! -z "$uuid1" ]; then
        updatePlistWithUUIDIfNecessary "$bundlePath/Contents/Info" $uuid1
    fi
    
    if [ ! -z "$uuid2" ]; then
        updatePlistWithUUIDIfNecessary "$bundlePath/Contents/Info" $uuid2
    fi

    echo "[uuid-patcher] Done!"
}

# Setting up the logfile.
exec >> $LOGFILE 2>&1

patchUUIDs

exit 0
